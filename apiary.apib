FORMAT: 1A
HOST: https://api-test.cloudloyalty.ru/

# CloudLoyalty API

Процессинг представляет собой веб-приложение, предоставляющее API по протоколу HTTPS.

Все HTTP-запросы выполняются методом POST, тело запроса содержит JSON-документ. В ответе возвращается также JSON-документ. Каждый запрос должен содержать HTTP-заголовки ```Accept: application/json``` и ```Content-Type: application/json```.

Базовый URL процессинга: https://api.cloudloyalty.ru/ (может быть изменен в ходе эксплуатации по договоренности сторон).

### Аутентификация запросов

Для защиты от несанкционированного доступа процессинг требует передачу секретного ключа в каждом запросе.

Ключ передается в заголовке ```X-Processing-Key``` HTTP-запроса:
```
POST https://api.cloudloyalty.ru/get-balance HTTP/1.1
Accept: application/json
Content-Type: application/json
Cache-Control: no-cache
X-Processing-Key: secret_key_string

<Request body>
```

Не сообщайте секретный ключ третьим лицам.

Защита ключа при передаче запроса по сети обеспечивается использованием протокола HTTPS.

При получении запроса, не содержащего ключ, либо содержащего неверный ключ, процессинг возвращает ошибку ```403 Forbidden```.

### Форматы данных

#### Строки
Для строк используется кодировка UTF-8.

#### Дата и время
С целью учёта локального времени при регистрации и выполнении операций отметка даты и времени во всех документах (и выгрузках), пересылаемых между системами форматируется в соответствии с RFC 3339 "Date and Time on the Internet: Timestamps" (http://tools.ietf.org/html/rfc3339).

Пример: ```1996-12-19T16:39:57-08:00```

#### Денежные величины
Все денежные величины (стоимость товаров, суммы покупки) указываются в рублях. С технической точки зрения они представляются вещественным числом с фиксированной точностью (2 знака после запятой).

#### Целочисленные величины
К целочисленным величинам относятся: количество товаров, суммы бонусов.

### Обработка ошибок

Основные ошибки принятия запроса обозначаются кодами ответа HTTP:

| Код ответа                      | Описание ошибки                                   |
|---------------------------------|---------------------------------------------------|
| ```404 Not Found```             | Неверный адрес для отправки запроса               |
| ```403 Forbidden```             | Ключ аутентификации не передан или некорректен    |
| ```405 Not Allowed```           | Неверный тип запроса (например, GET вместо POST)  |
| ```500 Internal Server Error``` | Сервер не выполнил запрос из-за внутренней ошибки |

При ответах сервера, отличных от ```200 OK```, тело не содержит JSON-документ.

#### Ошибки процессинга

При возникновении ошибок во время обработки запросов, процессинг формирует ответный JSON документ следующего содержания:
```
{
   "errorCode":1,
   "description":"Чек не обработан процессингом или обработан с ошибкой"
}
```

Параметры ответа:
- ```errorCode``` - цифровой код ошибки
- ```description``` - текстовое описание ошибки

HTTP-код ответа с описанием ошибки - ```200 OK```.


#### Коды ошибок процессинга

| Код       | Описание ошибки                                                 |
|-----------|-----------------------------------------------------------------|
| 1         | Чек не обработан процессингом или обработан с ошибкой           |
| 2         | В запросе к процессингу обнаружена ошибка или неверный вид JSON |
| 3         | Клиент не найден                                                |
| 4         | Аккаунт клиента заблокирован                                    |
| 5         | Не найден магазин                                               |
| 6         | Списание бонусов превышает допустимое значение                  |
| 10        | Возвращаемый товар не найден в чеке продажи                     |
| 11        | Сумма возврата больше суммы продажи                             |
| 13        | Чек продажи не найден на сервере процессинга                    |
| 14        | Чек для отмены не найден                                        |
| 15        | Отмена допускается только для последней операции                |
| 16        | Превышен допустимый интервал времени для отмены операции        |
| 17        | Чек с данным номером уже обработан                              |
| 20        | Номер телефона клиента не валиден                               |
| 21        | Продажа не найдена                                              |
| 22        | Не передан ключ аутентификации                                  |
| 23        | Клиент не аутентифицирован                                      |
| 24        | Клиент с таким номером телефона уже существует                  |
| 25        | Карта уже привязана к другому клиенту                           |
| 26        | Код подтверждения не отправлялся                                |
| 27        | Код подтверждения некорректен                                   |
| 28        | Слишком частая отправка кода подтверждения                      |
| 29        | У клиента не задан номер телефона                               |
| 30        | Клиент с таким внешним идентификатором уже существует           |
| 31        | Заказ не найден                                                 |
| 32        | Заказ уже обработан                                             |
| 33        | Промокод не найден                                              |
| 34        | Условия промокода не выполнены                                  |
| 35        | Промокод уже использован максимальное число раз                 |
| 36        | Время действия промокода еще не наступило или уже прошло        |

## Создание бонусного счета клиента [/new-client]

Метод создает бонусный счет клиента для последующего начисления и списания бонусов.

Обязательные поля: номер телефона, карта или внешний идентификатор.

### /new-client [POST]

+ Attributes (object)
    + client (object, required)
        + phoneNumber (string) - номер телефона клиента
        + email (string) - адрес электронной почты клиента
        + surname (string) - фамилия отдельно
        + name (string) - имя отдельно
        + patronymicName (string) - отчество отдельно
        + fullName (string) - фамилия, имя и отчество (используется, если нет разбивки по отдельным полям)
        + gender (number) - пол клиента

            Поддерживаемые значения:
            - 0 - пол неизвестен,
            - 1 - мужской,
            - 2 - женский
        
        + birthdate (string) - дата рождения

            Возможные форматы:
            - ```1967-11-21T00:00:00+04:00```
            - ```1967-11-21```
            - ```11-21``` - если известен только день в году

        + card (string) - номер карты для привязки к клиенту
        + isEmailSubscribed (boolean) - флаг, подписан ли клиент на маркетинговые рассылки по электронной почте

            Если не задан, считается равным true.

        + isPhoneSubscribed (boolean) - флаг, подписан ли клиент на маркетинговые рассылки по SMS или Viber

            Если не задан, считается равным true.

        + externalId (string) - идентификатор клиента, присваеваемый ему вызывающей системой (внешний идентификатор)

            Вызывающая сторона может присвоить каждому клиенту свой уникальный номер. Этот номер может использоваться в последующих вызовах для идентификации клиента, к которому относится вызываемая операция, наряду с другими идентификаторами - номером телефона и номером карты.

        + extraFields (object) - перечень дополнительных полей для передачи в базу процессинга
        + level (number) - уровень клиента в программе лояльности

+ Request (application/json)

    + Headersc

            Accept: application/json
            X-Processing-Key: 00000000-0000-0000-0000-000000000000

    + Body
    
            {
                "client": {
                    "phoneNumber":"+79251112223",
                    "email":"zherdin@ya.ru",
                    "fullName":"Жердин Глеб Евгеньевич",
                    "gender":1,
                    "birthdate":"1967-11-21T00:00:00+04:00",
                    "card":"2222000257859"
                }
            }

+ Response 200 (application/json)

    + Attributes (object)
        + client (object)
            + bonuses (number) -  баланс доступных бонусов
            + pendingBonuses (number) - баланс ожидаемых бонусов
            + phoneNumber (string) - номер телефона клиента
            + email (string) - адрес электронной почты клиента
            + surname (string) - фамилия
            + name (string) - имя
            + patronymicName (string) - отчество
            + fullName (string) - фамилия, имя и отчество одной строкой
            + gender (number) - пол клиента

                Значения:
                - 0 - пол неизвестен,
                - 1 - мужской,
                - 2 - женский
        
            + birthdate (string) - дата рождения

                Если год рождения неизвестен, возвращается 1900.

            + card (string) - номер бонусной карты
            + isEmailSubscribed (boolean) - флаг, подписан ли клиент на маркетинговые рассылки по электронной почте
            + isPhoneSubscribed (boolean) - флаг, подписан ли клиент на маркетинговые рассылки по SMS или Viber
            + externalId (string) - внешний идентификатор клиента
            + extraFields (object) - дополнительные параметры клиента
            + level (number) - уровень клиента в программе лояльности
        + bonuses (array)
            + (object)
                + expireAt (string) - дата сгорания бонуса
                + amount (number) - количество бонусов

    + Body

            {
               "client":{
                  "phoneNumber":"+79251112223",
                  "bonuses":1000,
                  "pendingBonuses":400,
                  "fullName":"Жердин Глеб Евгеньевич"
               },
               "bonuses":[
                  {
                     "expireAt":"2014-12-31T23:55:32+04:00",
                     "amount":100
                  }
               ]
            }

## Получение баланса [/get-balance]

Метод позволяет узнать количество ожидаемых и доступных бонусов на балансе пользователя и ФИО владельца. Также метод возвращает информацию по бонусам, которые сгорят в ближайшие 30 дней.

Делать запрос можно по номеру телефна клиента, по номеру карты или по внешнему идентификатору.

### /get-balance [POST]

+ Attributes
    + phoneNumber (string) - номер телефона клиента, по которому идет расчёт баланса
    + card (string) - карта клиента
    + externalId (string) - внешний идентификатор клиента

+ Request (application/json)

    + Headers

            Accept: application/json
            X-Processing-Key: 00000000-0000-0000-0000-000000000000

    + Body

            {
                "phoneNumber":"+79251112223"
            }

+ Response 200 (application/json)

    + Attributes (object)
        + client (object)
            + bonuses (number) -  баланс доступных бонусов
            + pendingBonuses (number) - баланс ожидаемых бонусов
            + phoneNumber (string) - номер телефона клиента
            + email (string) - адрес электронной почты клиента
            + surname (string) - фамилия
            + name (string) - имя
            + patronymicName (string) - отчество
            + fullName (string) - фамилия, имя и отчество одной строкой
            + gender (number) - пол клиента

                Значения:
                - 0 - пол неизвестен,
                - 1 - мужской,
                - 2 - женский
        
            + birthdate (string) - дата рождения

                Если год рождения неизвестен, возвращается 1900.

            + card (string) - номер бонусной карты
            + isEmailSubscribed (boolean) - флаг, подписан ли клиент на маркетинговые рассылки по электронной почте
            + isPhoneSubscribed (boolean) - флаг, подписан ли клиент на маркетинговые рассылки по SMS или Viber
            + externalId (string) - внешний идентификатор клиента
            + extraFields (object) - дополнительные параметры клиента
            + level (number) - уровень клиента в программе лояльности

        + bonuses (array)
            + (object)
                + expireAt (string) - дата сгорания бонуса
                + amount (number) - количество бонусов

    + Body

            {
               "client":{
                  "phoneNumber":"+79251112223",
                  "bonuses":1000,
                  "pendingBonuses":400,
                  "fullName":"ФИО"
               },
               "bonuses":[
                  {
                     "expireAt":"2014-12-31T23:55:32+04:00",
                     "amount":100
                  }
               ]
            }

## Обновление информации о клиенте [/update-client]

Метод изменяет данные о клиенте.

Делать запрос можно по номеру телефна клиента, по номеру карты или по внешнему идентификатору.

### /update-client [POST]

+ Attributes (object)
    + phoneNumber (string) - номер телефона клиента
    + card (string) - карта клиента
    + externalId (string) - внешний идентификатор клиента
    + client (object, required) - поля для обновления
        + phoneNumber (string) - новый номер телефона клиента
        + email (string) - новый адрес электронной почты клиента
        + surname (string) - новая фамилия отдельно
        + name (string) - новое имя отдельно
        + patronymicName (string) - новое отчество отдельно
        + fullName (string) - новые фамилия, имя и отчество (используется, если нет разбивки по отдельным полям)
        + gender (number) - новый пол клиента

            Поддерживаемые значения:
            - 0 - пол неизвестен,
            - 1 - мужской,
            - 2 - женский
        
        + birthdate (string) - новая дата рождения

            Возможные форматы:
            - ```1967-11-21T00:00:00+04:00```
            - ```1967-11-21```
            - ```11-21``` - если известен только день в году

        + card (string) - новый номер карты для привязки к клиенту

            Старая карта будет отвязана от клиента. Баланс бонусов, история покупок и статистика по клиенту сохранятся за клиентом и будут доступны по новой карте.

        + isEmailSubscribed (boolean) - новый флаг, подписан ли клиент на маркетинговые рассылки по электронной почте
        + isPhoneSubscribed (boolean) - новый флаг, подписан ли клиент на маркетинговые рассылки по SMS или Viber
        + externalId (string) - новый внешний идентификатор клиента
        + extraFields (object) - перечень дополнительных полей для передачи в базу процессинга
        + level (number) - новый уровень клиента в программе лояльности

+ Request (application/json)

    + Headers

            Accept: application/json
            X-Processing-Key: 00000000-0000-0000-0000-000000000000

    + Body
    
            {
                "phoneNumber":"+79251112223",
                "client": {
                    "email":"zherdin20@ya.ru",
                    "isEmailSubscribed": true
                }
            }

+ Response 200 (application/json)

    + Attributes (object)
        + client (object)
            + bonuses (number) -  баланс доступных бонусов
            + pendingBonuses (number) - баланс ожидаемых бонусов
            + phoneNumber (string) - номер телефона клиента
            + email (string) - адрес электронной почты клиента
            + surname (string) - фамилия
            + name (string) - имя
            + patronymicName (string) - отчество
            + fullName (string) - фамилия, имя и отчество одной строкой
            + gender (number) - пол клиента

                Значения:
                - 0 - пол неизвестен,
                - 1 - мужской,
                - 2 - женский
        
            + birthdate (string) - дата рождения

                Если год рождения неизвестен, возвращается 1900.

            + card (string) - номер бонусной карты
            + isEmailSubscribed (boolean) - флаг, подписан ли клиент на маркетинговые рассылки по электронной почте
            + isPhoneSubscribed (boolean) - флаг, подписан ли клиент на маркетинговые рассылки по SMS или Viber
            + externalId (string) - внешний идентификатор клиента
            + extraFields (object) - дополнительные параметры клиента
            + level (number) - уровень клиента в программе лояльности
        + bonuses (array)
            + (object)
                + expireAt (string) - дата сгорания бонуса
                + amount (number) - количество бонусов

    + Body

            {
               "client":{
                  "phoneNumber":"+79251112223",
                  "bonuses":1000,
                  "pendingBonuses":400,
                  "fullName":"Жердин Глеб Евгеньевич"
               },
               "bonuses":[
                  {
                     "expireAt":"2014-12-31T23:55:32+04:00",
                     "amount":100
                  }
               ]
            }

## Расчёт покупки [/calculate-purchase]

Запрос расчета предназначен для предварительного расчёта количества бонусов к списанию и/или начислению при покупке с использованием системы лояльности, а также скидки при применении промокода. 

Реального начисления/списания бонусов не происходит, система лояльности только делает расчёт.

В случае изменения чека необходимо отправить запрос заново.

Делать запрос можно по номеру телефна клиента, по номеру карты или по внешнему идентификатору.

### /calculate-purchase [POST]

+ Attributes (object)
    + calculate (object, required)
        + phoneNumber (string) - номер телефона клиента, по которому нужно произвести расчёт продажи
        + card (string) - карта клиента
        + externalId (string) - внешний идентификатор клиента
        + isAnonymousClient (boolean) - указывает, что запрос отправляется для покупки, не привязанной к конкретному клиенту (то есть без идентификации клиента по карте или номеру телефона)

        + loyaltyAction (string) - выбранная операция с бонусами по данному чеку
    
            Возможны следующие значения:
            - collect - бонусы будут только начислены для клиента
            - apply - бонусы будут только списаны с клиента
            - apply-collect - бонусы будут сначала списаны, а затем начислены на оставшуюся сумму для клиента

        + totalAmount (number, required) - общая сумма чека

            Сумма к оплате клиентом. Если на стороне магазина предусмотрены скидки, эта сумма должна быть с учетом этих скидок.

        + applyingAmount (number) - сумма для расчета применяемых бонусов

            Для указанной суммы будет рассчитано количество бонусов, которыми можно погасить покупку (если выбрана операция apply или apply-collect).

            Магазин может рассчитывать эту сумму как totalAmount, за вычетом стоимости товаров, к которым запрещено применять бонусы.

            Не может превышать totalAmount.

            Если не указана, считается равной totalAmount.

        + collectingAmount (number) - сумма для расчета начисляемых бонусов

            Для указанной суммы будет рассчитано количество бонусов для накопления клиентом (если выбрана операция collect).

            Магазин может рассчитывать эту сумму как totalAmount, за вычетом стоимости товаров, за которые запрещено начислять бонусы.

            Если не указана, считается равной totalAmount.

            Отношение collectingAmount к totalAmount будет учтено при расчете количества бонусов для начисления (если выбрана операция apply-collect).

        + applyBonuses (number) - количество используемых бонусов для покупки

            Не может превышать количество доступных бонусов клиента.

            Если не задано, используются все доступные бонусы.

        + collectBonuses (number) - количество бонусов, которые будут начислены клиенту за покупку, рассчитанное вызывающей стороной
        
            Если не задано, рассчитывается автоматически.

            Если задано, значение collectingAmount игнорируется.

        + promocode (string) - промокод

        + units (object) - позиции в чеке, каждая строка - отдельная единица товара
            + *unit number* (object)
                + sku (string, required) - артикул или другой номенклатурный идентификатор
                + itemTitle (string, required) - наименование товара
                + itemCount (number) - количество товара, используется для случаев, когда позицию невозможно разбить на единицы

                    Если не задано, принимается равным 1.

                + buyingPrice (number) - закупочная цена единицы
                + price (number, required) - цена единицы
                + category (string) - название категории товара

+ Request (application/json)

    + Headers

            Accept: application/json
            X-Processing-Key: 00000000-0000-0000-0000-000000000000

    + Body

            {
                "calculate": {
                    "phoneNumber": "+79251112223",
                    "totalAmount": 50000,
                    "loyaltyAction": "apply-collect",
                    "promocode": "RUB600",
                    "units": {
                        "1": {
                            "sku": "MD775RU/A",
                            "itemTitle": "Товар для продажи",
                            "price": 20000
                        },
                        "2": {
                            "sku": "MD775RU/A",
                            "itemTitle": "Товар для продажи",
                            "price": 20000
                        },
                        "3": {
                            "sku": "MD775RU/B",
                            "itemTitle": "Товар для продажи #2",
                            "price": 10000
                        }
                    }
                }
            }

+ Response 200 (application/json)

    + Attributes (object)
        + calculation (object)
            + appliedBonuses (number, required) - кол-во примененных бонусов к покупке
            + collectedBonuses (number, required) - кол-во бонусов, начисленных за покупку
            + maxBonuses (number, required) - максимальное кол-во бонусов, которые можно применить к данной покупке

                Учитываются ограничения программы лояльности и кол-во доступных бонусов у клиента.

            + promocodeDiscount (number) - скидка по промокоду

                Рассчитывается, только если в запросе переданы `units` и `promocode`.

                Равна сумме `promocodeDiscount` из массива `calculatedUnits`.

            + bonusesDiscount (number) - скидка по бонусам

                Если в запросе переданы `units`, это значение равно сумме значений `bonusesDiscount` из массива `calculatedUnits`.

            + totalDiscount (number, required) - сумма скидок
            + remainingAmount (number, required) - сумма к оплате (сумма за вычетом скидок)

                Рассчитывается как `totalAmount` из запроса за вычетом `totalDiscount`.

        + calculatedUnits (object, required) - позиции в чеке, каждая строка - отдельная единица товара
            + *unit number* (object)
                + originalPrice (number, required) - цена единицы
                + promocodeDiscount (number) - скидка по промокоду
                + bonusesDiscount (number) - скидка по бонусам
                + totalDiscount (number, required) - сумма скидок
                + calculatedPrice (number, required) - цена со скидкой

                    Рассчитывается как originalPrice - totalDiscount. Не может быть меньше нуля.

        + clientBonuses (object, required) - информация о прогнозируемом состоянии счета клиента после покупки
            + reserved (number, required) - количество зарезервированных бонусов
            + available (number, required) - количество доступных для списания бонусов
            + pending (number, required) - количество замороженных бонусовФ

    + Body
    
            {
                "calculation": {
                    "collectedBonuses": 4840,
                    "appliedBonuses": 1000,
                    "maxBonuses": 1500,
                    "promocodeDiscount": 600,
                    "bonusesDiscount": 1000,
                    "totalDiscount": 1600,
                    "remainingAmount": 48400
                },
                "calculatedUnits": {
                    "1": {
                        "originalPrice": 20000,
                        "promocodeDiscount": 240,
                        "bonusesDiscount": 400
                    },
                    "2": {
                        "originalPrice": 20000,
                        "promocodeDiscount": 240,
                        "bonusesDiscount": 400
                    },
                    "3": {
                        "originalPrice": 10000,
                        "promocodeDiscount": 120,
                        "bonusesDiscount": 200
                    }
                },
                "clientBonuses": {
                    "reserved": 0,
                    "available": 4840,
                    "pending": 4840
                }
            }

## Выполнение покупки [/apply-purchase]

Метод выполняет операцию начисления и/или списания бонусов.

Возможны три варианта работы с бонусами:
- Только начисление бонусов клиенту 
- Только списание бонусов с клиента
- Сначала списать бонусы с клиента, а затем начислить на оставшуюся оплаченную денежными средствами сумму их снова.

Для операций списания и списания-и-начисления в запросе передаются суммы списания бонусов на весь чек. Общая сумма списания бонусов не должны превышать значения, полученные в результате выполнения метода расчета покупки. Запрос предполагает наличие информации обо всех товарах в чеке и типе продажи.

Делать запрос можно по номеру телефна клиента, по номеру карты или по внешнему идентификатору.

### /apply-purchase [POST]

+ Attributes (object)
    + transaction (object, required)
        + phoneNumber (string) - номер телефона клиента, по которому производится продажа
        + card (string) - карта клиента
        + externalId (string) - внешний идентификатор клиента
        + isAnonymousClient (boolean) - указывает, что запрос отправляется для покупки, не привязанной к конкретному клиенту (то есть без идентификации клиента по карте или номеру телефона)

        + id (string, required) - номер транзакции или чека в системе партнера (из 1С)
        + executedAt (string, required) - дата и время совершения транзакции
        + shopCode (string, required) - код магазина, в котором осуществляется операция
        + shopName (string, required) - полное название магазина, в котором осуществляется операция 
        + cashier (string) - имя продавца, который оформил продажу товара
        + cashierId (string) - табельный номер продавца, который оформил продажу товара

        + loyaltyAction (string, required) - выбранная операция с бонусами по данному чеку
    
            Возможны следующие значения:
            - collect - бонусы будут только начислены для клиента
            - apply - бонусы будут только списаны с клиента
            - apply-collect - бонусы будут сначала списаны, а затем начислены на оставшуюся сумму для клиента

        + totalAmount (number, required) - общая сумма чека

            Сумма к оплате клиентом. Если на стороне магазина предусмотрены скидки, эта сумма должна быть с учетом этих скидок.

        + applyingAmount (number) - сумма для расчета применяемых бонусов

            Для указанной суммы будет рассчитано количество бонусов, которыми можно погасить покупку (если выбрана операция apply или apply-collect).

            Магазин может рассчитывать эту сумму как totalAmount, за вычетом стоимости товаров, к которым запрещено применять бонусы.

            Не может превышать totalAmount.

            Если не указана, считается равной totalAmount.

        + collectingAmount (number) - сумма для расчета начисляемых бонусов

            Для указанной суммы будет рассчитано количество бонусов для накопления клиентом (если выбрана операция collect).

            Магазин может рассчитывать эту сумму как totalAmount, за вычетом стоимости товаров, за которые запрещено начислять бонусы.

            Если не указана, считается равной totalAmount.

            Отношение collectingAmount к totalAmount будет учтено при расчете количества бонусов для начисления (если выбрана операция apply-collect).

        + applyBonuses (number, required) - количество используемых бонусов для покупки

            Не может превышать количество доступных бонусов клиента.

            Не может превышать максимальное количество бонусов к применению, рассчитанное на основе applyingAmount.

        + collectBonuses (number) - количество бонусов, которые будут начислены клиенту за покупку, рассчитанное вызывающей стороной
        
            Если не задано, рассчитывается автоматически.

            Если задано, значение collectingAmount игнорируется.

        + promocode (object) - информация о примененном промокоде
            + promocode (string, required) - промокод
            + promocodeDiscount (number, required) - величина скидки по промокоду

                Поле обязательно, если передан promocode.

        + executedAt (string) - дата и время выполнения расчета

        + items (array) - список позиций в чеке
            + (object)
                + sku (string, required) - артикул или другой номенклатурный идентификатор
                + itemTitle (string, required) - название товара
                + itemCount (number, required) - количество товара в чеке
                + buyingPrice (number) - закупочная цена единицы товара
                + price (number, required) - цена единицы товара
                + amount (number) - сумма

                    Если не указана, рассчитывается как price * itemCount.

                + category (string) - название категории товара

        + isConfirmationCodeRequired (boolean) - указывает, требуется ли подтверждение транзакции кодом, переданным в confirmationCode
        + confirmationCode (string) - код подтверждения, введенный клиентом (или со слов клиента)

            Отправка кода клиенту ранее должна быть запрошена вызовом метода /send-confirmation-code.

            После успешного совершения покупки код аннулируется, воспользоваться им повторно нельзя.

+ Request (application/json)

    + Headers

            Accept: application/json
            X-Processing-Key: 00000000-0000-0000-0000-000000000000

    + Body

            {
               "transaction":{
                  "phoneNumber":"+79251112223",
                  "id":"ATR0000000000001235",
                  "executedAt":"2014-05-30T13:45:32+04:00",
                  "shopCode":"ATR",
                  "shopName":"Atrium",
                  "cashier":"Иванов Иван Иванович",
                  "cashierId":"A0000275",
                  "totalAmount":50000.00,
                  "loyaltyAction":"apply-collect",
                  "applyBonuses":1000,
                  "items":[
                     {
                        "sku":"MD775RU/A",
                        "itemTitle":"Товар для продажи",
                        "itemCount":2,
                        "buyingPrice":42000.00,
                        "price":50000.00
                     }
                  ]
               }
            }

+ Response 200 (application/json)

    + Attributes (object)
        + confirmation (object)
            + phoneNumber - номер телефона клиента
            + purchaseId - номер транзакции покупки в системе партнера (чек в 1С)
            + totalAmount - общая сумма чека
            + paidAmount - сумма к оплате, оставшаяся после погашения части общей суммы примененными бонусами 
            + bonuses - обновлённая информация о бонусах клиента
                + applied - количество потраченных бонусов за транзакцию
                + collected - количество накопленных бонусов
                
                    В зависимости от операции, поля applied и collected могут иметь значение 0.
                
                + pending - количество ожидаемых бонусов для использования
                
                    Поле pending будет содержать значение collected и ожидаемых бонусов до совершения транзакции.
                
                + available - количество доступных бонусов



    + Body

            {
               "confirmation":{
                  "phoneNumber":"+79251112223",
                  "purchaseId":"ATR0000000000001235",
                  "totalAmount":50000.00,
                  "paidAmount":49000.00,
                  "bonuses":{
                     "applied":1000,
                     "collected":10,
                     "pending":410,
                     "available":0
                  }
               }
            }

## Расчет возврата товара [/calculate-return]

Запрос расчета возврата товара предназначен для предварительного расчёта количества ожидаемых бонусов, которое будет списано с клиента. 

Реального аннулирования бонусов не происходит, система лояльности только делает расчёт. 

Делать запрос можно по номеру телефна клиента, по номеру карты или по внешнему идентификатору.

### /calculate-return [POST]

+ Attributes (object)
    + calculate (object, required)
        + phoneNumber (string) - номер телефона клиента
        + card (string) - карта клиента
        + externalId (string) - внешний идентификатор клиента
        + purchaseId (string, required) - номер транзакции в системе партнера при покупке товара (чек в 1С)
        + refundAmount (number, required) - общая сумма возвращаемого товара

+ Request (application/json)

    + Headers

            Accept: application/json
            X-Processing-Key: 00000000-0000-0000-0000-000000000000

    + Body

            {
               "calculate":{
                  "phoneNumber":"+79251112223",
                  "purchaseId":"ATR0000000000001235",
                  "refundAmount":9000.00
               }
            }

+ Response 200 (application/json)

    + Attributes (object)
        + calculation (object)
            + phoneNumber (string) - номер телефона клиента
            + purchaseId (string) - номер транзакции в системе партнера при покупку товара (чек в 1С)
            + refundAmount (number) - общая сумма возвращаемого товара 
            + recoveredBonuses (number) - расчетное количество бонусов, которые будут возвращены клиенту
            + cancelledBonuses (number) - расчетное количество бонусов, которые будут аннулированы

    + Body

            {
               "calculation":{
                  "phoneNumber":"+79251112223",
                  "purchaseId":"ATR0000000000001235",
                  "refundAmount":9000.00,
                  "recoveredBonuses":49,
                  "cancelledBonuses":9
               }
            }

## Возврат товара [/apply-return]

Метод совершает аннулирование/перерасчет ожидаемых бонусов полученных при совершении покупки. Запрос предполагает наличие информации обо всех товарах в возврате. 

Делать запрос можно по номеру телефна клиента, по номеру карты или по внешнему идентификатору.

### /apply-return [POST]

+ Attributes (object)
    + transaction (object, required)
        + phoneNumber (string) - номер телефона клиента, по которому нужно вернуть товар
        + card (string) - карта клиента
        + externalId (string) - внешний идентификатор клиента
        + id (string, required) - номер транзакции возврата в системе партнера (из 1С)
        + executedAt (string, required) - дата и время совершения транзакции
        + purchaseId (string, required) - номер транзакции/чека при совершении покупки товара в системе партнера (из 1С) 
        + refundAmount (number, required) - общая сумма возвращаемых товаров
        + shopCode (string, required) - код магазина, в котором осуществляется операция
        + shopName (string, required) - полное название магазина, в котором осуществляется операция 
        + cashier (string) - имя продавца, который оформил возврат товара
        + cashierId (string) - табельный номер продавца, который оформил возврат товара
        + items (array) - список товаров для возврата
            + (object)
                + sku (string, required) - артикул или другой номенклатурный идентификатор товара для возврата
                + itemTitle (string, required) - название товара
                + itemCount (number, required) - количество товара в чеке
                + buyingPrice (number) - закупочная цена единицы товара
                + price (number, required) - цена единицы товара
                + amount (number) - сумма

                    Если не указана, рассчитывается как price * itemCount.

+ Request (application/json)

    + Headers

            Accept: application/json
            X-Processing-Key: 00000000-0000-0000-0000-000000000000

    + Body

            {
               "transaction":{
                  "phoneNumber":"+79251112223",
                  "id":"ATR0000000000001236",
                  "executedAt":"2014-05-30T13:45:32+04:00",
                  "purchaseId":"ATR0000000000001235",
                  "refundAmount":9000.00,
                  "shopCode":"ATR",
                  "shopName":"Atrium",
                  "cashier":"Иванов Иван Иванович",
                  "cashierId":"A0000275",
                  "items":[
                     {
                        "sku":"MD772RU/A",
                        "itemTitle":"Товар для продажи",
                        "itemCount":2,
                        "buyingPrice":4260.00,
                        "price":4500.00
                     }
                  ]
               }
            }

+ Response 200 (application/json)

    + Attributes (object)
        + confirmation (object)
            + phoneNumber (number) - номер телефона клиента
            + refundId (string) - номер транзакции для возврата товара в системе партнера
            + refundAmount (number) - общая сумма возвращённого товара
            + recoveredBonuses (number) - количество возвращенных бонусов
            + cancelledBonuses (number) - количество аннулированных бонусов

    + Body

            {
               "confirmation":{
                  "phoneNumber":"+79251112223",
                  "refundId":"ATR0000000000001236",
                  "refundAmount":9000.00,
                  "recoveredBonuses":0,
                  "cancelledBonuses":9
               }
            }

## Отмена операции [/revert-purchase]

Используется для отмены операций покупки, при возникновении ошибок во время обработки кассовой операции.

Система попытается отменить движение бонусов, произведенное при продаже.

### /revert-purchase [POST]

+ Attributes
    + transaction (object, required)
        + id (string, required) - номер транзакции отмены покупки в системе партнера (из 1С)
        + executedAt (string, required) - дата и время совершения транзакции 
        + purchaseId (string, required) - номер транзакции покупки в системе партнера (чек в 1С)
        + cashier (string) - имя продавца, который оформил отмену
        + cashierId (string) - табельный номер продавца, который оформил отмену

+ Request (application/json)

    + Headers

            Accept: application/json
            X-Processing-Key: 00000000-0000-0000-0000-000000000000

    + Body

            {
               "transaction":{
                  "id":"ATR0000000000001236",
                  "executedAt":"2014-05-30T13:45:32+04:00",
                  "purchaseId":"ATR0000000000001235",
                  "cashier":"Иванов Иван Иванович",
                  "cashierId":"A0000275"
               }
            }

+ Response 200 (application/json)

    + Attributes (object)
        + operationResult (object)
            + refundedBonuses - количество восстановленных бонусов

                Количество бонусов, возвращенное на счет клиента в результате операции. Применимо, если при операции продажи было списание бонусов со счета клиента.

            + cancelledBonuses - количество отмененных бонусов

                Количество бонусов, отозванных у клиента в результате операции. Применимо, если при продаже клиент получал бонусы на свой счет.

    + Body

            {
               "operationResult": {
                  "refundedBonuses": 400,
                  "cancelledBonuses": 100
               }
            }


## Отправка кода подтверждения [/send-confirmation-code]

Отправляет SMS с кодом подтверждения на номер телефона указанному клиенту. Сгененрированным кодом можно воспользоваться в методе /apply-purchase.

Метод можно вызывать несколько раз для одного и того же клиента. С каждым вызовом клиенту будет сгенерирован и отправлен новый код, при этом ранее отправленный код аннулируется.

Для одного и того же клиента метод нельзя вызывать чаще сконфигурированного на стороне сервера значения. При превышении заданного порога отправок метод вернет ошибку с кодом 28.

Делать запрос можно по номеру телефна клиента, по номеру карты или по внешнему идентификатору.

### /send-confirmation-code [POST]

+ Attributes
    + phoneNumber (string) - номер телефона клиента
    + card (string) - карта клиента
    + externalId (string) - внешний идентификатор клиента
    + isAnonymousClient (boolean) - указывает, что запрос отправляется для незарегистрированного клиента (то есть без идентификации клиента по карте или номеру телефона)

        Если запрос делается для незарегистрированного клиента, обязательно указывается значение номера телефона в `to`.

    + to (string) - номер телефона для отправки сообщения

        Если не указан, сообщение отправляется на номер, ассоциированный с клиентом, для которого делается запрос.

+ Request (application/json)

    + Headers

            Accept: application/json
            X-Processing-Key: 00000000-0000-0000-0000-000000000000

    + Body

            {
                "phoneNumber":"+79251112223"
            }

+ Response 200 (application/json)

    + Attributes (object)
        + result (object)
            + code (string) - сгенерированный проверочный код

                В зависимости от настроек, может содержать от двух до четырех цифр. Могут быть лидирующие нули.

                Нет необходимости сверять коды самостоятельно, предпочтительнее передать введенный кассиром код в вызове /apply-purchase, код будет сверен на сервере с последним отправленным клиенту кодом.

            + msgid (string) - идентификатор отправленного клиенту сообщения

                Можно будет воспользоваться для получения статуса отправки сообщения (пока не реализовано).

            + expiresAt (string) - дата и время, до которых высланный код считается действующим

                После наступления указанного времени кодом воспользоваться уже будет нельзя.

    + Body

            {
                "result":[
                    {
                        "code": "0043",
                        "msgid": "ea1af141-c15a-4600-9398-475b44d7a883",
                        "expiresAt": "2017-12-31T23:55:32+03:00"
                    }
                ]
            }


## Создание или изменение заказа [/set-order]

Создает заказ.

Если запрос делается с указанием идентификатора уже существующего заказа, новый заказ не создается, вместо этого вносятся изменения в уже существующий заказ. Если существующий заказ уже подтвержден или отменен, возвращается ошибка 32 "Заказ уже обработан".

При создании заказа на счету клиента резервируется количество бонусов, переданное в applyBonuses. Несмотря на то, что реального списания бонусов не происходит, количество доступных бонусов на счету клиента уменьшается на зарезервированное количество.

При изменении заказа и передачи нового значения applyBonuses, ранее зарезервированные бонусы освобождаются и резервируется новое количество.

После создания заказа его можно подтвердить методом /confirm-order или отменить методом /cancel-order.

Делать запрос можно по номеру телефна клиента, по номеру карты или по внешнему идентификатору.

### /set-order [POST]

+ Attributes (object)
    + client (object, required) - клиент, для которого создается заказ, нужно указать минимум один критерий
        + phoneNumber (string) - номер телефона
        + card (string) - карта
        + externalId (string) - внешний идентификатор

    + order (object, required) - заказ
        + id (string, required) - идентификатор заказа
        + executedAt (string) - дата и время создания заказа

            Для нового заказа, если не задана, считается равной текущим дате и времени.

        + shopCode (string, required) - код магазина, в котором осуществляется операция
        + shopName (string, required) - полное название магазина, в котором осуществляется операция

        + totalAmount (number, required) - общая сумма заказа

            Сумма к оплате клиентом. Если на стороне магазина предусмотрены скидки, указанная сумма должна быть с учетом этих скидок.

        + loyalty (object)
            + action (string, required) - выбранная операция с бонусами по данному заказу

                Возможны следующие значения:
                - collect - бонусы будут только начислены для клиента
                - apply - бонусы будут только списаны с клиента
                - apply-collect - бонусы будут сначала списаны, а затем начислены на оставшуюся сумму для клиента

            + applyingAmount (number) - сумма товаров, к которым можно применить бонусы

                Магазин может рассчитывать эту сумму как totalAmount, за вычетом стоимости товаров, к которым запрещено применять бонусы.

                На основе этой суммы система рассчитает максимальное количество бонусов, которые клиент может применить к покупке, но фактически примененное количество передается в другом параметре - applyBonuses.
    
                Не может превышать totalAmount.
    
                Если не указана, считается равной totalAmount.

            + collectingAmount (number) - сумма товаров, с которых клиент получит бонусы

                Магазин может рассчитывать эту сумму как totalAmount, за вычетом стоимости товаров, за которые запрещено начислять бонусы.
    
                На основе этой суммы система рассчитает, сколько бонусов клиент получит за покупку.

                Может быть как меньше, так и больше totalAmount.

                Если не указана, считается равной totalAmount.

            + applyBonuses (number, required) - количество используемых бонусов для покупки
    
                Не может превышать количество доступных бонусов клиента.
    
                Не может превышать максимальное количество бонусов к применению, рассчитанное на основе applyingAmount.

            + collectBonuses (number) - количество бонусов, которые будут начислены клиенту за покупку

                Используется, когда магазин хочет использовать свою логику расчета бонусов, начисляемых за покупку. Если не задано, рассчитывается автоматически.
    
                Если задано, значение collectingAmount игнорируется.O

            + isConfirmationCodeRequired (boolean) - указывает, требуется ли подтверждение транзакции кодом, переданным в confirmationCode
            + confirmationCode (string) - код подтверждения, введенный клиентом
    
                Отправка кода клиенту ранее должна быть запрошена вызовом метода /send-confirmation-code.
    
                После успешного создания заказа код аннулируется, воспользоваться им повторно нельзя.

        + promocode (string) - промокод

        + items (array) - список позиций заказа
            + (object)
                + sku (string, required) - артикул товара
                + itemTitle (string, required) - название товара
                + itemCount (number, required) - количество товара в чеке
                + buyingPrice (number) - закупочная цена единицы товара
                + price (number, required) - цена единицы товара
                + amount (number) - сумма

                    Если не указана, рассчитывается как price * itemCount.

+ Request (application/json)

    + Headers

            Accept: application/json
            X-Processing-Key: 00000000-0000-0000-0000-000000000000

    + Body

            {
                "client": {
                    "phoneNumber": "+79251112223"
                },
                "order": {
                    "id": "ORD0001235",
                    "executedAt": "2017-05-30T13:45:32+03:00",
                    "shopCode": "shopname.com",
                    "shopName": "shopname.com",
                    "totalAmount": 50000.00,
                    "loyalty": {
                        "action": "apply-collect",
                        "applyBonuses": 1000
                    }
                    "items": [
                        {
                            "sku": "MD775RU/A",
                            "itemTitle": "Товар для продажи",
                            "itemCount": 2,
                            "buyingPrice": 22000.00,
                            "price": 25000.00
                        }
                    ]
                }
            }

+ Response 200 (application/json)

    + Attributes (object)
        + operationResult (object)
            + remainingAmount (number) - сумма к оплате, оставшаяся после погашения части общей суммы примененными бонусами
            + appliedBonuses (number) - количество применненных бонусов

                Для заказа в этом поле содержится количество не списанных, а зарезервированных бонусов.

            + collectedBonuses (number) - количество начисляемых бонусов за покупку
    
                Для заказа это поле содержит количество бонусов, которое будет начислено после подтверждения.

        + clientBonuses (object) - бонусы на счету клиента
            + available (number) - текущее количество доступных бонусов
            + pending (number) - текущее количество ожидаемых ("замороженных") бонусов
            + reserved (number) - текущее количество зарезервированных бонусов

    + Body

            {
                "operationResult": {
                    "remainingAmount": 4900.00,
                    "appliedBonuses": 100,
                    "collectedBonuses": 245
                },
                "clientBonuses": {
                    "available": 0,
                    "pending": 250,
                    "reserved": 100
                }
            }


## Подтверждение заказа [/confirm-order]

Подтверждает ранее созданный заказ.

Нельзя подтвердить уже подтвержденный или отменный заказ, при попытке это сделать возвращается ошибка 32 "Заказ уже обработан".

При подтверждении заказа у клиента списываются зарезервированные при создании заказа бонусы и на основе данных заказа создается покупка.

### /confirm-order [POST]

+ Attributes (object)
    + orderId (string, required) - идентификатор заказа для подтверждения
    + executedAt (string) - дата операции подтверждения

        Если не задана, считается равной текущим дате и времени.

+ Request (application/json)

    + Headers

            Accept: application/json
            X-Processing-Key: 00000000-0000-0000-0000-000000000000

    + Body

            {
                "orderId": "ORD0001235",
                "executedAt": "2017-05-30T13:45:32+03:00"
            }

+ Response 200 (application/json)

    + Attributes (object)
        + operationResult (object)
            + remainingAmount (number) - сумма к оплате, оставшаяся после погашения части общей суммы примененными бонусами
            + appliedBonuses (number) - количество примененных бонусов
            + collectedBonuses (number) - количество накопленных бонусов

        + clientBonuses (object) - бонусы на счету клиента
            + available (number) - текущее количество доступных бонусов
            + pending (number) - текущее количество ожидаемых ("замороженных") бонусов
            + reserved (number) - текущее количество зарезервированных бонусов

    + Body

            {
                "operationResult": {
                    "remainingAmount": 49000.00,
                    "appliedBonuses": 400,
                    "collectedBonuses": 450
                },
                "clientBonuses": {
                    "available": 0,
                    "pending": 700,
                    "reserved": 0
                }
            }

## Отмена заказа [/cancel-order]

Отменяет ранее созданный заказ.

Нельзя отменить уже подтвержденный или отменный заказ, при попытке это сделать возвращается ошибка 32 "Заказ уже обработан".

При отмене заказа клиенту возвращаются зарезервированные при создании заказа бонусы.

### /cancel-order [POST]

+ Attributes (object)
    + orderId (string, required) - идентификатор заказа
    + executedAt (string) - дата операции

        Если не задана, считается равной текущим дате и времени.

+ Request (application/json)

    + Headers

            Accept: application/json
            X-Processing-Key: 00000000-0000-0000-0000-000000000000

    + Body

            {
                "orderId": "ORD0001235",
                "executedAt": "2017-05-30T13:45:32+03:00"
            }

+ Response 200 (application/json)

    + Attributes (object)
        + clientBonuses (object) - бонусы на счету клиента
            + available (number) - текущее количество доступных бонусов
            + pending (number) - текущее количество ожидаемых ("замороженных") бонусов
            + reserved (number) - текущее количество зарезервированных бонусов

    + Body

            {
                "clientBonuses": {
                    "available": 0,
                    "pending": 700,
                    "reserved": 0
                }
            }

## История начислений и списаний [/get-history]

Позволяет получить детализацию по начислениям и списаниям.

Возвращаемый массив отсортирован по дате операции от новых к старым.

### /get-history [POST]

+ Request (application/json)

    + Attributes (object)
        + client (object, required) - клиент, для которого делается запрос истории
            + phoneNumber (string) - номер телефона
            + card (string) - карта
            + externalId (string) - внешний идентификатор

        + pagination (object)
            + limit (number) - указывает максимальное число возвращаемых записей

                Максмальное значение - 100, минимальное - 1.

            + offset (number) - указывает смещение, с которого начнется возвращение данных

                Начало отсчета - 0.

    + Headers

            Accept: application/json
            X-Processing-Key: 00000000-0000-0000-0000-000000000000

    + Body

            {
                "client": {
                    "phoneNumber": "+79251112223"
                },
                "pagination": {
                    "limit": 20,
                    "offset": 0
                }
            }

+ Response 200 (application/json)

    + Attributes (object)
        + history (array, required)
            + (object, required)
                + at (string, required) - дата произошедшего события
                + amount (number, required) - количество бонусов, на которое изменилось состояние счета

                    Для операций прихода значение положительное. Для расхода - отрицательное.

                + operation (string, required) - вид произведенной операции

                    Одно из следующих значений:
                    - OPERATION_APPLIED - списание на оплату покупки (расход)
                    - OPERATION_COLLECTED - начисление за покупку (приход)
                    - OPERATION_EXPIRED - сгорание бонусов по истечении срока (расход)
                    - OPERATION_REFUNDED - отмена списания бонусов при возврате товара (приход)
                    - OPERATION_CANCELLED - отмена начисленных бонусов при возврате товара (расход)
                    - OPERATION_RECEIVED - начисление акционных бонусов (приход)
                    - OPERATION_RECALLED - отзыв акционных бонусов (расход)
                    - OPERATION_APPLY_REVERTED - откат списанных бонусов при откате транзакции продажи (приход)
                    - OPERATION_COLLECT_REVERTED - откат начисленных бонусов при откате транзакции продажи (расход)

                    Список операций в будущем может быть расширен.

                + operationName (string, required) - описание операции

                    Одно из следующих значений:
                    - Оплата покупки
                    - Начисление за покупку
                    - Списание по истечении срока
                    - Отмена списания
                    - Отмена начисления
                    - Начисление по акции
                    - Отмена

                    Список операций в будущем может быть расширен.Ф

                + OPERATION_APPLIED (object)
                    + purchaseId (string, required) - идентификатор продажи
                    + executedAt (string, required) - дата продажи
                    + totalAmount (number, required) - сумма покупки

                + OPERATION_COLLECTED (object)
                    + purchaseId (string, required) - идентификатор продажи
                    + executedAt (string, required) - дата продажи
                    + totalAmount (number, required) - сумма покупки

                + OPERATION_EXPIRED (object)

                + OPERATION_REFUNDED (object)
                    + returnId (string, required) - идентификатор возврата
                    + executedAt (string, required) - дата возврата
                    + refundAmount (number, required) - сумма возврата

                + OPERATION_CANCELLED (object)
                    + returnId (string, required) - идентификатор возврата
                    + executedAt (string, required) - дата возврата
                    + refundAmount (number, required) - сумма возврата

                + OPERATION_RECEIVED (object)
                    + actionName (string, required) - акция, в рамках которой произошло начисление

                        В настоящий момент возможные значения:
                        - Импорт (проставляется для бонусов, начисленных в рамках переноса бонусного счета из предыдущей бонусной системы)
                        - Корректировка (ручное изменение счета из интерфейса CloudLoyaly)
                        - Начисление в рассылке

                    + comment (string) - комментарий, оставленный оператором при корректировки счета

                + OPERATION_RECALLED (object)
                    + actionName (string, required) - акция, в рамках которой произошло списание

                        В настоящий момент возможные значения:
                        - Корректировка (ручное изменение счета из интерфейса CloudLoyaly)

                    + comment (string) - комментарий, оставленный оператором при корректировки счета

                + OPERATION_APPLY_REVERTED (object)
                    + purchaseId (string, required) - идентификатор продажи
                    + executedAt (string, required) - дата продажи
                    + totalAmount (number, required) - сумма покупки

                + OPERATION_COLLECT_REVERTED (object)
                    + purchaseId (string, required) - идентификатор продажи
                    + executedAt (string, required) - дата продажи
                    + totalAmount (number, required) - сумма покупки

        + pagination (object, required)
            + total (number, required) - сколько всего записей

    + Body

            {
                "history": [
                    {
                        "at": "2018-05-02T16:12:54+03:00",
                        "amount": 63,
                        "operation": "OPERATION_APPLIED",
                        "operationName": "Оплата покупки",
                        "OPERATION_APPLIED": {
                            "purchaseId": "66379",
                            "executedAt": "2018-05-02T16:12:50+03:00",
                            "totalAmount": 2300
                        }
                    },
                    {
                        "at": "2018-04-26T00:00:13+03:00",
                        "amount": -47,
                        "operation": "OPERATION_EXPIRED",
                        "operationName": "Списание по истечении срока",
                        "OPERATION_EXPIRED": {}
                    },
                    {
                        "at": "2018-04-18T09:00:02+03:00",
                        "amount": 300,
                        "operation": "OPERATION_RECEIVED",
                        "operationName": "Начисление по акции",
                        "OPERATION_RECEIVED": {
                            "actionName": "Начисление в рассылке"
                        }
                    },
                    {
                        "at": "2018-04-14T12:55:32+03:00",
                        "amount": -75,
                        "operation": "OPERATION_RECALLED",
                        "operationName": "Отмена",
                        "OPERATION_RECALLED": {
                            "actionName": "Корректировка",
                            "comment": "Излишне начисленные бонусы"
                        }
                    }
                ],
                "pagination": {
                    "total": 26
                }
            }